#version 450
#extension GL_ARB_separate_shader_objects : enable

#define GRAVITY_MAGNITUDE     4.8
#define WIND_MAGNITUDE        1.0
#define WIND_FREQ             0.4
#define STIFFNESS_COEFFICIENT 0.7

#define ORIENT_CULL           1
#define VIEW_FRUSTUM_CULL     1
#define DIST_CULL             1

#define ORIENTATION_THRESHOLD 0.6
#define FRUSTUM_TOLERANCE     -0.2
#define MAX_DIST              40.0
#define NUM_DIST_LEVELS       10

#define WORKGROUP_SIZE        32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

// ─────── Uniform Buffers ───────
layout(set = 0, binding = 0) uniform CameraBuffer {
    mat4 u_ViewMatrix;
    mat4 u_ProjMatrix;
};

layout(set = 1, binding = 0) uniform TimeUniform {
    float u_DeltaTime;
    float u_TotalTime;
};

layout(set = 2, binding = 3) uniform ObjectTransform {
    vec4 u_ObjectTransform; // .xyz = position, .w = radius
};

// ─────── Blade Data Structures ───────
struct Blade {
    vec4 base;     // .xyz = base position, .w = orientation angle
    vec4 middle;   // .xyz = mid control point, .w = height
    vec4 tip;      // .xyz = tip position, .w = width
    vec4 upVec;    // .xyz = up vector, .w = stiffness


    int bladeType; // NEW: type of the blade
    int pad0, pad1, pad2;
};

layout(set = 2, binding = 0) buffer InputBlades {
    Blade sb_InputBlades[];
};

layout(set = 2, binding = 1) buffer OutputBlades {
    Blade sb_CulledBlades[];
};

layout(set = 2, binding = 2) buffer IndirectDrawArgs {
    uint sb_VertexCount;
    uint sb_InstanceCount;
    uint sb_FirstVertex;
    uint sb_FirstInstance;
};

// ─────── Helpers ───────
bool inBounds(float value, float bound) {
    return value >= -bound && value <= bound;
}

bool isInFrustum(vec3 pos) {
    vec4 clip = u_ProjMatrix * u_ViewMatrix * vec4(pos, 1.0);
    float wTol = clip.w + FRUSTUM_TOLERANCE;
    return inBounds(clip.x, wTol) && inBounds(clip.y, wTol);
}

vec3 computeWind(vec3 pos, float time) {
    return WIND_MAGNITUDE * vec3(
        sin(WIND_FREQ * pos.x * time),
        0.0,
        cos(WIND_FREQ * pos.z * time)
    );
}

// ─────── Main ───────
void main() {
    uint id = gl_GlobalInvocationID.x;

    if (id == 0) {
        sb_VertexCount = 0;
    }
    barrier();

    Blade blade = sb_InputBlades[id];

    vec3 base = blade.base.xyz;
    vec3 mid  = blade.middle.xyz;
    vec3 tip  = blade.tip.xyz;
    vec3 up   = blade.upVec.xyz;

    float orientation = blade.base.w;
    float height      = blade.middle.w;
    float width       = blade.tip.w;
    float stiffness   = blade.upVec.w;

    int bladeType = blade.bladeType;

    // Apply per-type customization
    if (bladeType == 1) {
        // Wide, short, floppy blade
        height *= 0.8;
        width *= 1.3;
    }
    else if (bladeType == 2) {
        // Tall, thin, stiff blade
        height *= 1.3;
        width *= 0.6;
        stiffness *= 1.5;
        up = normalize(vec3(0.0, 1.0, 0.2));
    }


    // ───── Gravity ─────
    vec3 gravity = vec3(0.0, -1.0, 0.0) * GRAVITY_MAGNITUDE;
    vec3 t1 = normalize(vec3(-cos(orientation), 0.0, sin(orientation))); // width dir
    vec3 front = normalize(cross(t1, up));
    vec3 frontGravity = 0.25 * length(gravity) * front;
    vec3 totalGravity = gravity + frontGravity;

    // ───── Hooke's Law Recovery ─────
    vec3 originalTip = base + height * up;
    vec3 recoveryForce = (originalTip - tip) * stiffness * STIFFNESS_COEFFICIENT;

    // ───── Wind ─────
    vec3 wind = computeWind(base, u_TotalTime);
    float fd = 1.0 - abs(dot(normalize(wind), normalize(tip - base)));
    float fr = dot(tip - base, up) / height;
    vec3 windForce = wind * fd * fr;

    // ───── Position Update ─────
    vec3 totalForce = (totalGravity + recoveryForce + windForce) * u_DeltaTime;
    tip += totalForce;

    // ───── Collision ─────
    vec3 massCenter = 0.25 * base + 0.5 * mid + 0.25 * tip;
    vec3 sphereCenter = u_ObjectTransform.xyz;
    float sphereRadius = u_ObjectTransform.w;

    if (distance(tip, sphereCenter) < sphereRadius) {
        vec3 toCenter = normalize(tip - sphereCenter);
        tip = sphereCenter + toCenter * sphereRadius;
    } else if (distance(massCenter, sphereCenter) < sphereRadius) {
        vec3 toCenter = normalize(tip - sphereCenter);
        tip += (sphereCenter + toCenter * sphereRadius - tip) * 4.0;
    }

    // ───── Validation ─────
    tip -= up * min(dot(up, tip - base), 0.0);

    float groundProjLen = length(tip - base - up * dot(tip - base, up));
    mid = base + height * up * max(1.0 - groundProjLen / height, 0.05 * max(groundProjLen / height, 1.0));

    float L0 = distance(base, tip);
    float L1 = distance(base, mid) + distance(mid, tip);
    float avgLength = (2.0 * L0 + L1) / 3.0;
    float ratio = height / avgLength;
    mid = base + ratio * (mid - base);
    tip = mid + ratio * (tip - mid);

    blade.middle.xyz = mid;
    blade.tip.xyz = tip;
    sb_InputBlades[id] = blade;

    // ───── Culling ─────
    vec3 camPos = inverse(u_ViewMatrix)[3].xyz;
    vec3 toBlade = base - camPos;
    vec3 viewDir = toBlade - up * dot(toBlade, up);

#if ORIENT_CULL
    if (abs(dot(normalize(viewDir), t1)) < ORIENTATION_THRESHOLD) return;
#endif

#if VIEW_FRUSTUM_CULL
    vec3 curveMid = 0.25 * base + 0.5 * mid + 0.25 * tip;
    if (!isInFrustum(base) && !isInFrustum(tip) && !isInFrustum(curveMid)) return;
#endif

#if DIST_CULL
    float viewDist = length(viewDir);
    int level = int(floor(NUM_DIST_LEVELS * (1.0 - viewDist / MAX_DIST)));
    if (id % NUM_DIST_LEVELS < level) return;
#endif

    // ───── Write Visible Blade ─────
    sb_CulledBlades[atomicAdd(sb_VertexCount, 1)] = blade;
}
